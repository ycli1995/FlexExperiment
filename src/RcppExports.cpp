// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// col_merge_dgcmatrix_cpp
Eigen::SparseMatrix<double> col_merge_dgcmatrix_cpp(std::vector<Eigen::SparseMatrix<double>> mat_list, std::vector<std::vector<std::string>> mat_rownames, std::vector<std::string> all_rownames);
RcppExport SEXP _FlexExperiment_col_merge_dgcmatrix_cpp(SEXP mat_listSEXP, SEXP mat_rownamesSEXP, SEXP all_rownamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<Eigen::SparseMatrix<double>> >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type mat_rownames(mat_rownamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type all_rownames(all_rownamesSEXP);
    rcpp_result_gen = Rcpp::wrap(col_merge_dgcmatrix_cpp(mat_list, mat_rownames, all_rownames));
    return rcpp_result_gen;
END_RCPP
}
// row_merge_dgcmatrix_cpp
Eigen::SparseMatrix<double> row_merge_dgcmatrix_cpp(std::vector<Eigen::SparseMatrix<double>> mat_list, std::vector<std::vector<std::string>> mat_colnames, std::vector<std::string> all_colnames);
RcppExport SEXP _FlexExperiment_row_merge_dgcmatrix_cpp(SEXP mat_listSEXP, SEXP mat_colnamesSEXP, SEXP all_colnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<Eigen::SparseMatrix<double>> >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type mat_colnames(mat_colnamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type all_colnames(all_colnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(row_merge_dgcmatrix_cpp(mat_list, mat_colnames, all_colnames));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_knn_to_sparse_weights
Rcpp::List rcpp_knn_to_sparse_weights(Rcpp::IntegerMatrix& nn_idx, Rcpp::NumericMatrix& nn_dist, bool self_loops);
RcppExport SEXP _FlexExperiment_rcpp_knn_to_sparse_weights(SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP self_loopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< bool >::type self_loops(self_loopsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_knn_to_sparse_weights(nn_idx, nn_dist, self_loops));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_knn_to_sparse_idx
Rcpp::List rcpp_knn_to_sparse_idx(Rcpp::IntegerMatrix& nn_idx, bool self_loops);
RcppExport SEXP _FlexExperiment_rcpp_knn_to_sparse_idx(SEXP nn_idxSEXP, SEXP self_loopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< bool >::type self_loops(self_loopsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_knn_to_sparse_idx(nn_idx, self_loops));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FlexExperiment_col_merge_dgcmatrix_cpp", (DL_FUNC) &_FlexExperiment_col_merge_dgcmatrix_cpp, 3},
    {"_FlexExperiment_row_merge_dgcmatrix_cpp", (DL_FUNC) &_FlexExperiment_row_merge_dgcmatrix_cpp, 3},
    {"_FlexExperiment_rcpp_knn_to_sparse_weights", (DL_FUNC) &_FlexExperiment_rcpp_knn_to_sparse_weights, 3},
    {"_FlexExperiment_rcpp_knn_to_sparse_idx", (DL_FUNC) &_FlexExperiment_rcpp_knn_to_sparse_idx, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FlexExperiment(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
